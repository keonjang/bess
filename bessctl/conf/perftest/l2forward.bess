import scapy.all as scapy
import time

def test_l2forward(ngate, nentry):
    softnic.reset_all()
    src = Source()
    sink = Sink()
    
    if nentry > 1048576 :
        sw = L2Forward(size=nentry/2)
    else:
        sw = L2Forward()
    
    rand = RandomUpdate()
    
    ip = scapy.IP()
    udp = scapy.UDP()
    eth = scapy.Ether(dst = '01:02:03:04:05:06', src = '00:01:02:03:04:05')
    pkt = bytearray(str(eth/ip/udp))

    rw = Rewrite(templates=[pkt])


    #add_query = []
    #for i in range(nentry):
    #	addr = '01:02:%02x:%02x:%02x:%02x' % \
    #	 ((i / 16777216) % 256,(i/65536) % 256, (i / 256) % 256, i % 256)
    #    
    #	add_query.append({'addr':addr, 'gate':i % ngate})
    #    
    #    if (len(add_query) >= 512) :
    #        sw.query(add = add_query)
    #        add_query = []
    #
    # sw.query(add = add_query)

    sw.query(gen = {'base':'01:02:00:00:00:00', 'count': nentry, 'gate_count': ngate})

    arg = {'vars' :
           [ 
               {'offset' : 2,
    	        'size' : 4,
	        'min' : 0,
	        'max' : nentry - 1}
           ]
    }

    rand.query(arg)

    src -> rw -> rand -> sw
    for i in range(ngate):
        sw[i] -> sink
    
    softnic.resume_all()
    #warmup
    time.sleep(1)

    before = softnic.get_module_info(rand.name)
    time.sleep(1.5)
    after = softnic.get_module_info(rand.name)

    tot = 0
    for i in range(ngate):
        tot += (after['gates'][i]['pkts'] - before['gates'][i]['pkts']) / \
	    (after['gates'][i]['timestamp'] - before['gates'][i]['timestamp'])
	    

    print 'Entries: %10d\tGates: %d\tThruput: %f Mpps' % \
    	  (nentry, ngate, tot / 1000000.0)
    softnic.pause_all()

 


for i in [1,32,1024,32*1024,1048576,32*1048576]:
#for i in [1,32,1048576]:
    test_l2forward(1, i)


